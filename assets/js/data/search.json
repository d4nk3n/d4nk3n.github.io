[ { "title": "使用SDR模拟GPS信号", "url": "/posts/gps-sdr-sim/", "categories": "Life", "tags": "GPS, SDR", "date": "2023-03-13 00:00:00 +0800", "snippet": "如果你在开发工作中不满足于Android的模拟位置，而你正好有一个SDR开发板的话，可以试试使用SDR模拟GPS信号。美国的GPS民用卫星信号是没有加密的，而且卫星的星历很好获取，信号频率为1575.42 MHz，大部分SDR开发板都支持这个频率。1. 需要准备的硬件和软件1.1 硬件硬件上需要一个SDR开发板（比如Hackrf One，其他更高级的也可以）。另外像Hackrf One这样的设备，它自带的晶振的误差太大，不能模拟GPS信号，需要买一个外部晶振（最好是0.1ppm的）。晶振的安装方法请见：https://github.com/osqzss/gps-sdr-sim/blob/master/extclk/hackrf_gpssim.jpg1.2 软件对于Hackrf One，需要一个生成卫星信号的gps-sdr-sim和用于发射信号的hackrf_transfer，Linux上用gcc和apt就搞定了，下面讲讲Windows上怎么办： gps-sdr-sim可以从GitHub上获取：https://github.com/osqzss/gps-sdr-sim，按README上说明用Visual Studio编译； Hackrf没有提供Windows上的hackrf_transfer的二进制版本，不过PothosSDR自带了Hackrf的二进制程序，可以安装它。之后可以在程序目录下找到hackrf_transfer.exe；2. 操作步骤首先要知道你要模拟的位置的经纬度。以四川外国语大学的西区运动场为例子，在Google地图上拾取坐标：坐标位置是29.572615 N, 106.430159 E，不清楚当地海拔多少，先设置为200m吧。我们还需要GPS的星历表，它包含了GPS卫星的位置、速度、时钟等信息，可以从NASA的网站上下载（需要注册账号），下面链接是2023年的卫星导航文件，里面是按一年的第几天分类的：https://cddis.nasa.gov/archive/gnss/data/daily/2023/。里面有很多文件，我们可以看一下https://cddis.nasa.gov/archive/gnss/00readme里的说明。可以知道其中DDD/YYd/YYn/brdcDDD0.YYn.gz也就是我们需要的YYYY年DDD日的GPS星历文件，比如https://cddis.nasa.gov/archive/gnss/data/daily2023/070/23n/brdc0700.23n.gz：接着使用gps-sdr-sim可以生成我们需要模拟的GPS信号：gps-sdr-sim.exe -e brdc0700.23n -l 29.572615,106.430159,200 -b 8其中参数 -l 29.572615,106.430159,200自然就是经纬度和高度； -b 8是I/Q数据的位数，对于HackRF One来说是8，这是它的DAC的位数； -e brdc0700.23n自然就是使用的星历（注意我们下载的是压缩包，需要解压）；其他的参数（比如模拟的时间长度等等）可以自行查阅程序的帮助信息。生成好信号之后我们调用hackrf_transfer发送它：hackrf_transfer.exe -t gpssim.bin -f 1575420000 -s 2600000 -a 1 -x 47 -R其中参数 -t gpssim.bin是gps-sdr-sim生成的GPS信号文件； -f 1575420000是GPS卫星的频率1575.42 MHz； -s 2600000是采样率2.6MHz； -a 1是TX RF放大器，设置为1开启； -x 47是TX VGA (IF)增益，设置为47分贝； -R是反复发送；这时候Hackrf One就开始发射信号了，将你的手机放到它旁边，打开GPS定位软件（这里用的是GPS Test和高德地图），如果你手机好几分钟都没有接收到GPS信号的话，可以重启试试。显示的GPS信号的信噪比：可以看到这时已经成功定位了：GPS Test显示的定位的位置的经纬度，和我们需要模拟的位置很接近：最后再看看高德地图里显示的定位：3. 坐标系转换需要注意的是，我们前面提到的经纬度坐标是WGS84坐标。之前我们是从Google地图的卫星地图获取的坐标数据，Google的卫星地图使用的是WGS84坐标，没有问题。但是下面情况使用的坐标系不一样： Google地图在中国内地（也就是不含港澳台）的路网坐标（使用GCJ-02坐标系）； 百度地图的坐标（使用BD-09坐标系）； 高德地图的坐标（使用GCJ-02坐标系）；比如深圳和香港边界，你可以看到深圳这边的路网和卫星地图不重合，而香港这边的没有问题。使用不同的坐标系是出于国防安全需要（作用微乎其微）和商业数据保护（喜欢整护城河）。如果要进行坐标转换的话，GitHub上也有开源实现，也可以使用这个网页https://atool.vip/lnglat/，注意遵守法律法规。4. 结语与参考链接除了模拟静止位置，实际上我们还可以模拟运动时的GPS信号，需要的话可以查询gps-sdr-sim项目的README。如果想了解这几个坐标系的关系，可以看看最后一个参考链接里的文章。 gps-sdr-sim的GitHub仓库 hackrf的GitHub仓库 高德地图坐标拾取（GCJ-02） A Short Guide To The Chinese Coordinate System" }, { "title": "22年11月8日月全食", "url": "/posts/lunar-eclipse/", "categories": "Life", "tags": "Lunar Eclipse, Astronomy, Binoculars", "date": "2022-11-08 00:00:00 +0800", "snippet": "今日在学校里观察了月全食的过程。之前由于各种原因，还没有见过月食。我携带了10×50（物镜50mm，放大倍数10倍）双筒望远镜一个，以及主摄为IMX766的手机一部。观测地点位于北纬45度，东经127度左右。月全食月亮从地平线升起时，就进入了地球的半影。这时月亮还是完好无缺，只是亮度稍低。初亏大概17时09分开始，等到了晚上6点，已经是这个样子了：18时02分的月亮整个月全食大概18时16分进入食既，19时42分生光。以下是Stellarium里和手机拍摄的图片的对比：19时33分：19时43分，正好是生光的时候：19时47分：昴星团今天还试着寻找了一下昴星团。月亮西面方向是毕宿和昴宿，用望远镜观测到昴星团，效果大概是这样：昴星团昴星团常常只能看到其中6颗，而今天还隐约可以观测到昴宿三。昴宿三在昴星团的位置Stellarium显示昴宿三的视星等5.75，就算天气很好也接近肉眼极限了。天王星本次月全食还伴随着月掩天王星，平时天王星很难观测到，利用这次机会，我在月食生光之前成功定位到天王星。在双筒下稍注意就能看到，不过很暗淡，观察不到任何颜色。食甚附近天王星的位置天王星视星等在5.67左右，它的地平高度还要更高些，光污染影响更小，比昴宿三观察起来容易。" }, { "title": "在全志D1上启动操作系统", "url": "/posts/boot-os-from-d1/", "categories": "Computer", "tags": "D1, Dev board, RISC V", "date": "2022-08-12 00:00:00 +0800", "snippet": "1. 前言之前提到，Sipeed Lichee RV看起来是一个性价比很高的RISC-V开发板，虽然性能相对孱弱，但起码能启动像Debian这样的Linux发行版，其实也够用。当然我想除了启动Debian或者Arch Linux之外，肯定也有人想在这个开发板上启动一个自己编写的OS，毕竟在QEMU上运行跟在物理机上还是不一样的。之前有人在Reddit提出了这个问题，不过看回复的样子，他们也不太清楚。2. 全志D1芯片的启动过程首先先搞懂这个Allwinner D1芯片的启动流程，根据Datasheet（可在全志官网或者https://linux-sunxi.org/D1查看）和Sunxi-Allwinner_Nezha可以大致了解芯片的启动过程。2.1 BROMCPU启动后，首先从地址0x0的位置取指令，这个位置是CPU内部的片上存储Boot ROM(BROM)，地址范围是从0x0开始的48KiB空间。启动后检查开发板上的FEL按键是否按下，如果按下则进入FEL模式（手动升级模式或者说Recovery模式），没有按下则尝试从SD卡加载BOOT0，加载的位置为SD卡的第16或者256扇区，不过一般GPT分区模式可能会使用第16扇区，所以最好把BOOT0烧写到256扇区去。BROM的源代码没有公开，不过对BROM的一些逆向工程可以在GitHub上找到。2.2 BOOT0BOOT0用来初始化DDR和一些外设，然后加载下一级Bootloader，这个在启动U-Boot的时候也作为SPL(Secondary Program Loader)，目前版本的BOOT0从SD卡中加载一个包含了OpenSBI和U-Boot的TOC1格式的镜像，BOOT0会尝试从SD卡的16MiB的位置加载TOC1镜像，加载失败则会进入FEL模式。BOOT0的代码也在GitHub上：https://github.com/smaeul/sun20i_d1_spl2.3 OpenSBI和U-BootBOOT0尝试加载的TOC1镜像里包含了OpenSBI和U-Boot，首先运行的是OpenSBI(Open Supervisor Binary Interface)，可以近似理解为固件，提供了一些环境调用，比如控制台收发字符，关机等功能，之后的U-Boot可以初始化更多外设，可以从网络或者U盘等设备加载OS。3. 使用XFEL启动可不可以不从SD卡启动呢？之前提到这个开发板有一个FEL模式，有一个非官方的工具xfel也可以完成DDR和串口初始化、加载文件到内存等功能，这样就不需要向SD卡烧写BOOT0、OpenSBI和U-Boot了。现在已经有人已经移植了MIT的xv6到D1上(https://github.com/michaelengel/xv6-d1)，编译好之后，可以通过xfel初始化内存，然后将其加载到开发板的DDR3内存起始地址0x40000000处：PS C:\\&amp;gt; xfel ddr d1Initial ddr controller succeededPS C:\\&amp;gt; xfel write 0x40000000 .\\kernel.bin100% [================================================] 1.010 MB, 461.421 KB/sPS C:\\&amp;gt; xfel exec 0x40000000之后可以从串口看到xv6打印的信息，如果发现输出混乱，是因为输出的换号符号只有LF，可以在串口终端设置里补上CR符号。启动xv6xv6运行在RISC-V的M模式下，可以直接加载运行。如果你的OS运行在S模式，也可以用xfel先加载编译好的OpenSBI和OS到内存，再执行命令运行OpenSBI。注意Lichee RV开发板的内存大小为512MB，对应的物理地址从0x40000000开始。4. 使用OpenSBI和U-Boot这部分介绍编译Bootloader的过程。这部分的命令参考了项目https://github.com/tmolteno/d1_build/的内容。4.1 安装编译依赖# Install the prerequisitessudo apt updatesudo apt install -y autoconf automake autotools-dev curl \\ python3-setuptools python3 libmpc-dev \\ libmpfr-dev libgmp-dev gawk build-essential \\ bison flex texinfo gperf libtool patchutils \\ bc zlib1g-dev libexpat-dev swig libssl-dev \\ python3-distutils python3-dev git \\ gcc-riscv64-linux-gnu g++-riscv64-linux-gnu4.2 编译BOOT0# Build SPL for D1git clone --branch mainline https://github.com/smaeul/sun20i_d1_splcd sun20i_d1_splmake CROSS_COMPILE=riscv64-linux-gnu- p=sun20iw1p1 mmc# The binary is at: sun20i_d1_spl/nboot/boot0_sdcard_sun20iw1p1.bin4.3 编译OpenSBI# Build OpenSBI for D1git clone --depth 1 --branch d1-wip https://github.com/smaeul/opensbicd opensbimake CROSS_COMPILE=riscv64-linux-gnu- PLATFORM=generic FW_PIC=y FW_OPTIONS=0x2# The binary is at: opensbi/build/platform/generic/firmware/fw_dynamic.bin4.4 编译U-Boot# Build U-Boot for D1git clone --depth 1 --branch d1-wip https://github.com/smaeul/u-boot.gitcd u-boot# 如需支持DTO，在config/lichee_rv_defconfig 末尾加上CONFIG_OF_LIBFDT_OVERLAY=ymake CROSS_COMPILE=riscv64-linux-gnu- lichee_rv_defconfig# 默认编译的U-Boot不保存环境变量，可以在menuconfig的Environment项中设置存储位置# 1. 指定&quot;Environment in an MMC device&quot;# 2. 设置&quot;mmc device number&quot;和&quot;mmc partition number&quot;为0# 3. 再设置&quot;Environment offset&quot;为0x2008000# 4. 在&quot;Command line Interface &amp;gt; Environment commands&quot;启用&quot;saveenv&quot;# 上述操作将环境变量存储在microSD卡的32MiB开始的位置make menuconfigmake -j $(nproc) $CROSS all V=1# The binary is at: u-boot/arch/riscv/dts/sun20i-d1-lichee-rv-dock.dtb# The binary is at: u-boot/u-boot-nodtb.bin4.5 生成TOC1镜像将下面这段代码保存为toc1_lichee_rv_dock.cfg，这个文件指定了OpenSBI和U-Boot等加载到的位置。注意文件路径。[opensbi]file = ./opensbi/build/platform/generic/firmware/fw_dynamic.binaddr = 0x40000000[dtb]file = ./u-boot/arch/riscv/dts/sun20i-d1-lichee-rv-dock.dtbaddr = 0x44000000[u-boot]file = ./u-boot/u-boot-nodtb.binaddr = 0x4a000000vim toc1_lichee_rv_dock.cfg./u-boot/tools/mkimage -A riscv -T sunxi_toc1 -d toc1_lichee_rv_dock.cfg u-boot.toc14.6 将生成的二进制文件烧写入SD卡中# ${DEVICE}为microSD卡的路径，例如/dev/sdbsudo parted -s -a optimal -- ${DEVICE} mklabel gpt# 烧写SPL到microSD卡的128KiB的位置sudo dd if=boot0_sdcard_sun20iw1p1.bin of=${DEVICE} bs=8192 seek=16# 烧写OpenSBI和U-Boot到microSD卡的16MiB的位置sudo dd if=u-boot.toc1 of=/dev/sdb bs=512 seek=328004.7 启动U-Boot查看烧写入SD卡的内容：# mmc命令可以将SD卡内容读入内存，md命令查看内存内容# 查看烧写入SD卡中的SPLmmc read 0x50000000 0x100 0x1;md 0x50000000 80# 查看烧写入SD卡中的U-Bootmmc read 0x50000000 0x8020 0x1;md 0x50000000 80# 查看写入的U-Boot环境变量mmc read 0x50000000 0x10040 0x1;md 0x50000000 80之后可以在U-Boot中从U盘等设备加载操作系统镜像启动了，注意操作系统运行在S模式，可以使用OpenSBI的接口。# 在U-Boot中将U盘中的Image文件加载到0x50000000执行usb startfatls usb 0:1fatload usb 0:1 0x50000000 Imagego 0x500000005. 其他参考链接 https://github.com/maquefel/licheerv-boot-build https://github.com/bigmagic123/d1-nezha-baremeta https://github.com/chinchilla222/nezha-d1 https://github.com/tmolteno/d1_build https://whycan.com/t_6546.html https://whycan.com/t_6683.html https://d1.docs.aw-ol.com/ https://open.allwinnertech.com/ （需要注册账号）" }, { "title": "拓展SD卡的根分区", "url": "/posts/expand-sdcard-rootfs/", "categories": "Computer", "tags": "D1, Dev board, SD Card", "date": "2022-07-03 00:00:00 +0800", "snippet": "前言作为（购买）开发板爱好者，我一直想搞个带MMU的RISC-V板子。之前有一个叫Nezha就挺不错，不过它价格比树莓派贵不少，而性能一言难尽（用的全志的D1-H@1GHz，平头哥C906架构，单核单发顺序5段流水）。众所周知等等党永远不亏，后来Sipeed发布了一个叫Lichee RV Dock的小板子，只需要140块钱就能买个能启动Linux的开发板，还是比较划算的。不过这种开发板一般文档和配套软件很有限，我烧写了Sipeed官网提供的Tina Linux镜像（好像不能用dd烧写，要用它专门的软件），启动之后过段时间会因为无线网卡有关的问题直接卡死，而且没有包管理器也不太好用。好在有人在GitHub上分享了生成Debian镜像的脚本，还提供了预编译好的镜像，所以我准备用这个现成的Debian镜像试试看。烧写之后运行Debian过程中没有遇到什么问题（就是性能捉急，有点卡），不过预编译的镜像是给8G的SD卡用的，烧写到16G的卡上会浪费一半空间。所以我想试试看怎么拓展它的根分区。显示系统信息拓展SD卡根分区一般SD卡名字都叫mmcblk0（如果只有一张卡的话），可以用sudo fdisk /dev/mmcblk0然后输入命令p查看它的分区。目前我的SD卡有3个分区：首先是mmcblk0p1，挂载到/boot分区，包含了Linux内核镜像等内容；然后是挂载到根目录的mmcblk0p2，里面是根目录下的文件；最后是swap分区。考虑到这个开发板内存只有512M，整个交换空间还是有必要的。为了拓展空间，就需要把交换分区挪到SD卡末尾的空间去，再拓展根分区的空间。步骤如下： 先输入sudo swapoff -a关闭交换分区； 把swap分区删了； 计算好给swap预留的大小，拓展mmcblk0p2的大小； 拓展根分区； 重新创建swap分区； 使用sudo mkswap /dev/mmcblk0p3初始化swap分区； 写入/etc/fstab文件设置swap信息； 输入sudo swapon -a开启交换分区； 如果输入df -h没有观察到rootfs空间变化的话，可以试试sudo resize2fs /dev/mmcblk0p2。修改分区可以用fdisk来完成，如果你有Ubuntu等桌面系统，还可以用Disks等桌面软件操作。我使用的fdisk创建分区时跟网上查到的教程不同，需要在创建之后再指定分区类型。用到的fdisk命令： m：显示帮助 p：显示分区信息 d：删除分区 n：创建一个新分区，默认是Linux filesystem t：修改分区类型，输入编号指定类型，也可以输入别名（比如swap）指定 w：应用更改 q：退出最后的分区效果:rv@lichee:/$ sudo fdisk /dev/mmcblk0Welcome to fdisk (util-linux 2.38).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.This disk is currently in use - repartitioning is probably a bad idea.It&#39;s recommended to umount all file systems, and swapoff all swappartitions on this disk.Command (m for help): pDisk /dev/mmcblk0: 14.84 GiB, 15931539456 bytes, 31116288 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: gptDisk identifier: 097C6CDB-3A07-4AFD-BEDC-93BF1530C575Device Start End Sectors Size Type/dev/mmcblk0p1 81920 204799 122880 60M Linux filesystem/dev/mmcblk0p2 204800 28968959 28764160 13.7G Linux filesystem/dev/mmcblk0p3 28968960 31116254 2147295 1G Linux swap/ect/fstab文件内容如下：# &amp;lt;device&amp;gt; &amp;lt;dir&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;pass&amp;gt;/dev/mmcblk0p1 /boot ext2 rw,defaults,noatime 1 1/dev/mmcblk0p2 / ext4 rw,defaults,noatime 1 1/dev/mmcblk0p3 none swap sw 0 0其他 树莓派的raspi-config提供有拓展rootfs的脚本，如果要批量操作考虑可以考虑； 这个开发板其实可以驱动4K显示器，不过我觉得用APT装软件都有点慢…… 平头哥开源了C906的RTL代码，不过像是代码生成器生成的（也能读），而且也并不包含C906的所有部分（比如向量拓展），我想开发时Debug有点用； 为什么全志D1和平头哥C906的手册都需要注册才能下载？ 如果你想找个文档更丰富，性能更好的RISC-V开发板，可以等等BeagleV。" }, { "title": "怎样在CNKI上下载学位论文的PDF版", "url": "/posts/cnki-download-pdf/", "categories": "Life", "tags": "CNKI", "date": "2022-02-26 00:00:00 +0800", "snippet": "CNKI是包含有中国大部分学位论文（除了PKU）的数据库，一直以来着力推广CAJ文件格式（让你下它那个CAJ Viewer），而不提供学位论文的PDF版下载，非常难用（有些文献管理工具打不开CAJ）。其实CNKI并不是没有PDF版，只是隐藏了而已。如果使用Chrome内核浏览器整个插件是最方便的，如果不方面安装的话可以参考下面两个方法。1. 知网海外版把论文详情页面的域名从kns.cnki.net修改为oversea.cnki.net或者chn.oversea.cnki.net，可以发现多了一个PDF下载的按钮。中文版海外版2. 修改下载链接有些网络条件打不开知网海外版，也可以在论文检索页面的下载链接（链接格式为：https://kns.cnki.net/KNS8/download?filename=）末尾加一个参数&amp;amp;dflag=pdfdown检索界面的下载按钮参考：https://www.zhihu.com/question/25275044/answer/793372843" }, { "title": "哈工大2020秋计算机组成原理试题", "url": "/posts/computer-architecture-exam/", "categories": "Computer", "tags": "HIT exam, Computer Architecture", "date": "2021-01-09 00:00:00 +0800", "snippet": "分数组成：必修（选修）：作业5%（10%）+报告5%（10%）+平时5%（10%）+实验35%（0%）+考试50%（70%）期末试卷：填空（20分）+选择（20分）+简答题（6×4=24分）+3个大题（12×3=36分）填空和选择很多都是网上能找到的题，复习时间充裕的话可以找一些做。填空 软件兼容分为哪两种，哪一种是其根本特征？ 提高并行性的三种途径有？ 指令字长16位，分为单、双地址指令，地址位5位，双地址指令A条，问单地址指令最多多少条？ CPU存储操作数的单元有？（堆栈、累加器、一组寄存器） 一个实例，让判断流水线瓶颈和给出消除流水线瓶颈的两种方法。 程序局部性分哪两种？ Tomasulo算法和支持前瞻机制的版本，寄存器重命名分别用什么实现的？ 根据Cache性能公式给出改进Cache性能的三种办法。 CPU在什么时刻采样中断请求信号（在开中断情况下），在什么时刻采样DMA的总线请求信号？选择 一个实例，用Amdahl定律计算加速比。 总线集中判优中，什么方式响应速度最快，什么方式对电路故障最为敏感？ 一个实例，计算1位和2位分支预测准确率。 有关分支指令调度的一道概念题。 MIPS五段流水线在哪里判断Load指令的RAW相关？ 前瞻执行允许指令（乱序）执行，但要求（顺序）确认。 浮点数运算对阶的原则（小阶对大阶）。 关于CARY-Ⅰ向量机的一道题，请见该链接第8题。 访问速度最快的是（寄存器）。 在程序执行过程中，Cache与主存的地址映射是由（硬件自动）完成的。简答题 简述CPU的性能公式，并根据该公式比较CISC和RISC指令集的CPU。 名相关分哪两种？判断下列指令序列中的名相关，使用寄存器重命名（给两个寄存器S和T）消除名相关。 计算使用BTB的分支代价，没搞错的话是原题。 五个方面比较程序中断方式和DMA方式（大意了，没有看）。3道大题 给出一些条件，让计算L2 Cache的相连度对不命中时间的影响。 一个4级流水线（每一级耗时都是$\\Delta t$），执行12条指令。第一个小问：画出时空图，计算效率。第二个小问，把这个流水线改成ILP为4的超标量流水线，画出时空图，计算效率和加速比。 Tomasulo算法，给出以下指令序列，对于每个阶段，写出加法保留站、乘法保留站、浮点寄存器和$Q_i$的内容。 MULTD F0, F4, F6ADDD F2, F0, F6 最后，计算机的运算方法（唐朔飞教材第6章）大题一点都没考，这是怎么回事呢？" }, { "title": "野燕麦的吸湿运动", "url": "/posts/wild-oat/", "categories": "Life", "tags": "wild oat, plants", "date": "2020-03-30 00:00:00 +0800", "snippet": "遇水旋转的芒我还在农村的时候，在路边田头偶尔能看到一种杂草：差不多60-80cm高，大概一株有几十个种子。这些种子不像谷子，非常轻，中间干瘪瘪的。种子大概长这样这种植物特殊的是它的种子上有一根很长的芒。跟小麦的芒不一样，这根芒是弯折的，我印象中比较硬，而且占了整个种子重量的一大部分。我把那个芒扯下来，把弯折的地方折成大概90°，把一端插到比较湿润的泥巴里，出现了神奇的现象：就像秒针一样，芒在泥巴里顺时针转了起来！这里有一个芒在湿润条件下旋转的视频：https://youtu.be/watch?v=4KwbV6SAE8E虽然小时候对这个现象背后的原理非常感兴趣，但是当时条件有限，既没有电脑，也找不到什么相关的书来看，问了很多朋友呢也没有人知道这个东西。过了几年装了电脑，在中文互联网上试了很多关键词也搜不到，我一度怀疑小时候记忆出了差错。后来也就不再考虑这事情了。直到前一段时间，看到这个问题在我收藏夹里躺了几年了，终于下决心要搞明白它。我尝试了多种关键词，查了一个多小时，弄清楚了这种植物的名字：野燕麦（Avena fatua）。而所谓的旋转，就是其吸湿芒（Hygroscopic awn）的吸湿运动。野燕麦简图我搜索的过程大概是这样的： 首先确定植物应该是禾本科的 搜索南方禾本科常见杂草（接近100种） 根据印象找出长得最像的几个 将植物的名字+几个关键词（湿润，旋转，芒）一起搜索 确定是野燕麦 （因为还没有人详细科普过原理）转到知网搜索，搞清楚野燕麦的运动原理过程比较曲折，主要是因为不认得这种草，也不知道这种旋转属于吸湿运动，搜索起来比较困难。野燕麦的吸湿运动关于野燕麦的吸湿芒旋转的研究，国内最早的应该是1974年康素珍、朱文江发表的《野燕麦种子的传播特性及对其防除的关系》，主要是对野燕麦种子的形态和传播特性做了初步观察，描述了野燕麦种子的吸湿运动过程。野燕麦种子的外部形态1.干燥的背腹面2.吸湿后捻转消失，长芒伸直的状态为了便于描述，首先说明野燕麦种子的结构：野燕麦的种子由基盘、短毛、外稃[fū]、内桴[fú]、主芒（芒柱），膝曲和芒针构成。 长芒约2-4厘米，中部有一膝曲，膝曲上部称芒针，下部为芒柱。野燕麦的主芒是由两束纤维细胞平行排列的纤维束相互缠绕而成双螺旋的平直圆柱体，两束纤维宽度比约为1：2，通常柱体可捻转5周左右。野燕麦主芒和未成熟主芒的横截面当地表的相对湿度增大到95%以上时，芒柱因吸湿而向相反的方向（顺时针方向）放松旋转，芒针也跟着作相同的方向旋转。这时在芒针与芒柱之间呈钝角的膝曲也逐渐伸直。当地表因受日照和气温的影响湿度减少到40%以下时，芒柱又因失水干缩重新逆时针方向捻转起来。另外,在外稃基部的基盘上，密生向上的短毛，当芒柱在进行顺时针或逆时针旋转时，这些糙毛就起着定向的作用，使种子只能向前移动而不会后退。观察发现：芒柱吸湿后，只需几秒钟即开始带动芒针旋转，芒针每旋转一周约需一分半钟。在一昼夜的干湿交替变化中，芒的旋转运动可使种子在地表上向前移动一厘米。凭着这个每天一厘米的速度，这种运动能帮助种子向土壤裂缝移动，寻找更合适的萌发位置。野燕麦种子借长芒的旋转自行钻入土壤裂缝中的示意图野燕麦吸湿运动的原理现在我们知道野燕麦吸湿芒转动的本质和作用了，那么吸湿芒解旋和捻转的原理又是什么呢？实际上，这种解旋动作并不罕见，你随手扯一张卫生纸，把它捻成一股，一旦浸一点水，纤维素吸水膨胀，它就解旋开来。对应的逆过程也可以想想以下拧毛巾的动作。不过吸湿芒的结构和吸湿运动机制远比捻成一股的纸复杂，实际上，目前对植物吸湿芒运动机理，存在不同的观点。（以下内容，包括图片引用自李哲的《野燕麦吸湿芒吸湿运动的力学机制研究》）1979年Stinson和Peterson利用X射线衍射和扫描电子显微镜对野燕麦麦芒的结构进行了研究，认为野燕麦麦芒外层不对称厚壁纤维细胞的伸长造成了麦芒的吸湿螺旋行为。他们研究认为野燕麦麦芒外的层细胞的细胞壁木素含量很低，厚壁细胞在失水干燥时细胞壁变薄、直径变小，而螺旋盘绕在细胞壁的S2层内的纤维素纤维长度需要保持不变，细胞长度则必须伸长。1983年Raju和Ramaswany研究了野燕麦麦芒所含纤维细胞的吸涨特性，认为野燕麦麦芒内层和外层细胞的涨缩性能差异引起了干燥和吸湿时的螺旋和解螺旋运动。他们研究发现，野燕麦主芒的纤维细胞壁由纤维素、半纤维素和不溶性多糖、果胶组成，除维管束外其佘纤维细胞不含木质素。他们分别对野燕麦主芒的各层纤维细胞的吸湿变形方式进行了研宄，提出了野燕麦麦芒吸湿后的解螺旋运动类似于内外两层变形能力不同的橡皮管粘连后产生变形的观点。2016年李哲的论文《野燕麦吸湿芒吸湿运动的力学机制研究》，认为野燕麦主芒的表层是起保护作用的、坚硬的、不亲水的表层纤维，为主芒提供必要的刚度和支撑；次外层的纤维细胞壁内薄外厚，可以有效地消除内层纤维变形时内外层细胞间的应力。野燕麦主芒的结构野燕麦主芒几种纤维细胞的结构：a,b所示为主芒表层角质化的纤维细胞c所示的为次外层纤维细胞d为中心束纤维细胞，微纤丝角为75°而旋转运动的关键在厚壁纤维细胞：除维管束外的中心束为富含纤维素和半纤维素的厚壁纤维细胞，细胞壁次外层具有很大的微纤丝角，吸湿和干燥过程中有很强的轴向伸缩和扭转变形能力，为吸湿运动提供所需的变形。（为什么这种结构会产生这种变形机制，由于我知识浅薄，难以概括总结，具体内容可见其论文第三章）至于这种研究的作用，以前可能用于防治野燕麦这种田间杂草，现在应该是用于仿生材料的研究了。参考资料参考文献： 康素珍, 朱文江. 野燕麦种子的传播特性及对其防除的关系[J]. 植物学杂志, 1974(01):19-20. 李哲. 野燕麦吸湿芒吸湿运动的力学机制研究[D]. 2016. 李哲, 刘溪源, 徐献忠. 植物吸湿芒的结构及其运动的力学机制综述[J]. 应用力学学报, 2015, 032(004):652-656.外部链接： 野燕麦 Avena fatua, http://www.iplant.cn/info/Avena%20fatua PPBC中国植物图像库——最大的植物分类图片库, http://ppbc.iplant.cn/sp/36132Update 2021-11:整理的时候，发现今年一篇发表在Acta Biomaterialia（中科院一区）上的文章，也是研究野燕麦吸湿运动的：Repetitive hygroscopic snapping movements in awns of wild oats: https://doi.org/10.1016/j.actbio.2021.08.048" }, { "title": "两道数学题", "url": "/posts/two-math-problems/", "categories": "Life", "tags": "Mathematical Olympiad", "date": "2020-03-08 00:00:00 +0800", "snippet": " 在某星系的每个星球上，都有一位天文学家在观察最近的星球，星球之间的距离各不相等。证明：如果星球的数目为奇数，则必有某个星球无人观察。 一个物体在两个平面上的平行投影都是圆。证明：这两个圆的半径相等。 这两道题分别取自1966年全俄罗斯和1971年全苏联数学奥林匹克竞赛，受试者都是八到十年级的学生。第一题，我们假设共有$n$个星球。如果选取两个相距最近的星球，显然，两个星球上的天文学家在互相观察。接下来剩下$n-2$个星球：如果这$n-2$个星球中至少有一个天文学家在观察之前选取的星球，那么必有星球无人观察；如果取出的两个星球没有其他人观察，那么就对这$n-2$个星球取出两个相距最近的星球，重复操作。由于$n$是奇数，所以最终会剩下一个星球无人观察。第二题，如果两个平面平行，那么显然成立。如果不平行，考虑该物体在两个平面的交线$l$上的投影。显然这个投影既是物体在一个平面上的投影再向$l$上的投影，又是物体在另一个平面上的投影再向$l$上的投影。而圆向所在平面内的直线所作的投影都是一条长度等于直径的线段。" }, { "title": "“国际一流大学”", "url": "/posts/first-class-universities/", "categories": "Computer", "tags": "domain name", "date": "2020-02-25 00:00:00 +0800", "snippet": "今天在某乎上刷到这个问题：2020-02-25-first-class-universities点开其中一个链接国际一流大学.com，确实指向了某工业大学：中文域名的原理国际化域名实际上是将中文等Unicode字符（当然也包括“😂”）通过Punycode转换成ASCII码来访问的一种域名机制。在DNS服务器中，像国际一流大学.com是转换成xn--4gqx2tswbz7c7w9a7h0d.com来储存的。域名前面都有字符串xn--和普通域名相区别。类似与将二进制字节码转化为字符串的Base64，Punycode将Unicode编码转换成ASCII码。不过它们的原理不太一样：Base64是一种基于查表的转换方法，而Punycode是Bootstring算法的一个规范，基于一种有限状态自动机，比较复杂。具体过程可以参考这个在线加密解密网站和上面提到的规范了解。域名注册时间查看whois，得益于GPDR，隐藏了注册者信息：$ whois xn--4gqx2tswbz7c7w9a7h0d.com Domain Name: XN--4GQX2TSWBZ7C7W9A7H0D.COM Registry Domain ID: 2495908344\\_DOMAIN\\_COM-VRSN Registrar WHOIS Server: whois.dynadot.com Registrar URL: http://www.dynadot.com Updated Date: 2020-02-23T15:24:22Z Creation Date: 2020-02-23T11:19:46Z Registry Expiry Date: 2021-02-23T11:19:46Z Registrar: DYNADOT, LLC Registrar IANA ID: 472 Registrar Abuse Contact Email: abuse@dynadot.com Registrar Abuse Contact Phone: +16502620100 Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Name Server: NS1.DYNADOT.COM Name Server: NS2.DYNADOT.COM DNSSEC: unsigned URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/&amp;gt;&amp;gt;&amp;gt; Last update of whois database: 2020-02-26T13:29:27Z &amp;lt;&amp;lt;&amp;lt;注册时间是2月23号，就是这两天。跳转的原理由于窝工网站不用https也能访问，会不会是通过CNAME实现的呢？看了一下DNS没有CNAME记录，A记录指向境外服务器：$ dig ANY xn--4gqx2tswbz7c7w9a7h0d.com; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.7-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; ANY xn--4gqx2tswbz7c7w9a7h0d.com;; global options: +cmd;; Got answer:;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 7128;; flags: qr rd ra; QUERY: 1, ANSWER: 6, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 512;; QUESTION SECTION:;xn--4gqx2tswbz7c7w9a7h0d.com. IN ANY;; ANSWER SECTION:xn--4gqx2tswbz7c7w9a7h0d.com. 242 IN SOA ns1.dynadot.com. hostmaster.xn--4gqx2tswbz7c7w9a7h0d.com. 1582732538 16384 2048 1048576 2560xn--4gqx2tswbz7c7w9a7h0d.com. 37 IN NS ns1.dynadot.com.xn--4gqx2tswbz7c7w9a7h0d.com. 37 IN NS ns2.dynadot.com.xn--4gqx2tswbz7c7w9a7h0d.com. 37 IN A 34.202.122.77xn--4gqx2tswbz7c7w9a7h0d.com. 37 IN A 35.169.225.248xn--4gqx2tswbz7c7w9a7h0d.com. 37 IN A 52.0.7.30;; Query time: 34 msec;; SERVER: 114.114.114.114#53(114.114.114.114);; WHEN: Thu Feb 27 00:35:39 CST 2020;; MSG SIZE rcvd: 196使用开发者工具，发现是使用302跳转：显然是这个域名服务商提供了301/302跳转的机制。参考链接另外，这里有个网站记录了很多类似的网址，从源代码的注释来看，大多数都是23号注册的。这个知乎问题里记录了事件的时间线。" }, { "title": "哈工大2019秋数据结构试题（主观题部分）", "url": "/posts/data-structure-exam/", "categories": "Computer", "tags": "HIT exam, data structure", "date": "2020-01-14 00:00:00 +0800", "snippet": "分数组成（10平时+20实验+70期末）和题型（选择10分+填空10分+简答25分+算法设计25分）和往年一样，没有什么变化。以下部分基于个人回忆，和原题目描述上可能有出入。1.选择&amp;amp;填空（10+10=20分）这部分题目不难，只考基本概念和简单的计算。与考研题相比要简单一些。做一做本校考研题的数据结构部分应该就没问题了。2.简答题（25分，3题）简答题共三题，主要考察查找（平衡树、散列）、堆、线性表等知识。第一题内容是给出一个二叉搜索树的后序遍历，问能不能确定这个二叉树。第二题分两个小问，第一个小问是根据快递的快递单号确定快递存放的货柜，方便查找，体现了什么思想？第二个小问是已知货柜号和快递单号，在取快递时，可以采用哪些策略来快速找到快递？第三题内容是银行系统中，每个客户都对应一个权限。要求银行每次可以选取一个权限最高或者权限最低的客户来服务，问采用什么数据结构？3.算法设计题（25分，3题）这部分题要求自行设计数据结构，给出C/C++/Java语言代码，分析复杂度。第一题是给出中序线索二叉树的一个结点P，设计一个算法，求它的前驱结点P$.第二题是给出两个升序排列的数组A、B，长度分别为m、n，设计一个算法，输入一个数k，返回数组A、B中第k小的元素。第三题是给出一个有向图G，设计一个算法，判断任意两个顶点是否连通。" }, { "title": "__x86.get_pc_thunk.ax函数", "url": "/posts/x86-get-pc-thunk/", "categories": "Computer", "tags": "__x86.get_pc_thunk, x86, asm", "date": "2019-12-03 00:00:00 +0800", "snippet": "在Linux下反汇编32位的程序时，经常会遇到__x86.get_pc_thunk.ax函数。例如在32位的Hello world程序中，.text段偏移0x52c处，调用了该函数：0000051d &amp;lt;main&amp;gt;: 51d: 8d 4c 24 04 lea 0x4(%esp),%ecx 521: 83 e4 f0 and $0xfffffff0,%esp 524: ff 71 fc pushl -0x4(%ecx) 527: 55 push %ebp 528: 89 e5 mov %esp,%ebp 52a: 53 push %ebx 52b: 51 push %ecx 52c: e8 28 00 00 00 call 559 &amp;lt;__x86.get_pc_thunk.ax&amp;gt; 531: 05 a7 1a 00 00 add $0x1aa7,%eax 536: 83 ec 0c sub $0xc,%esp 539: 8d 90 08 e6 ff ff lea -0x19f8(%eax),%edx 53f: 52 push %edx 540: 89 c3 mov %eax,%ebx 542: e8 69 fe ff ff call 3b0 &amp;lt;puts@plt&amp;gt; 547: 83 c4 10 add $0x10,%esp 54a: b8 00 00 00 00 mov $0x0,%eax 54f: 8d 65 f8 lea -0x8(%ebp),%esp 552: 59 pop %ecx 553: 5b pop %ebx 554: 5d pop %ebp 555: 8d 61 fc lea -0x4(%ecx),%esp 558: c3 ret 查看函数，内容如下（xchg %ax,%ax命令交换%ax与%ax，相当于nop）：00000559 &amp;lt;__x86.get_pc_thunk.ax&amp;gt;: 559: 8b 04 24 mov (%esp),%eax 55c: c3 ret 55d: 66 90 xchg %ax,%ax 55f: 90 nop简单来说，该函数的功能是将%eip寄存器内容传入%eax寄存器。相当于mov %eip, %eax。这个函数在x86上的PIC(position independent code，即位置无关代码)中使用。它将%eip的位置加载到%eax寄存器中，从而实现对模块内部数据（例如全局变量）的访问。原因是x86的指令集中没有直接读取%eip的指令。类似的函数还有：__x86.get_pc_thunk.bx，__x86.get_pc_thunk.cx， __x86.get_pc_thunk.dx。功能是类似的，只不过传入的寄存器分别为%ebx， %ecx， %edx。早期版本的编译器中，这个函数叫__i686.get_pc_thunk.ax。在64位程序中不需要这个函数，因为x86-64指令集中可以通过lea指令直接获取%rip。" } ]
